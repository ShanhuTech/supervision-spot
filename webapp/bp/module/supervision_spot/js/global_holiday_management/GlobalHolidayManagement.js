"use strict";

class GlobalHolidayManagement {
  /**
   * 构造函数
   *
   * @param ruleArray 规则数组
   */
  constructor(ruleArray) {
    ////////////////////////////////////////////////////////////////////////////
    // 全局假期规则。
    ////////////////////////////////////////////////////////////////////////////
    this.globalHolidayRule = ruleArray[0];
    ////////////////////////////////////////////////////////////////////////////
    // 全局假期数组。
    ////////////////////////////////////////////////////////////////////////////
    this.globalHolidayArray = new Array();
    ////////////////////////////////////////////////////////////////////////////
    // 待删除数据的uuid。
    ////////////////////////////////////////////////////////////////////////////
    this.removeDataUuid = null;
    ////////////////////////////////////////////////////////////////////////////
    // 队列。
    ////////////////////////////////////////////////////////////////////////////
    this.queue = new Queue();
  }

  /**
   * 生成代码
   */
  generateCode() {
    ////////////////////////////////////////////////////////////////////////////
    // 容器。
    ////////////////////////////////////////////////////////////////////////////
    this.container = new JSControl("div");
    ////////////////////////////////////////////////////////////////////////////
    // 工具栏。
    ////////////////////////////////////////////////////////////////////////////
    this.toolbar = new JSControl("div");
    ////////////////////////////////////////////////////////////////////////////
    // 添加全局假期按钮。
    ////////////////////////////////////////////////////////////////////////////
    this.addGlobalHolidayButton = new JSControl("button");
    ////////////////////////////////////////////////////////////////////////////
    // 全局假期表格。
    ////////////////////////////////////////////////////////////////////////////
    this.globalHolidayTable = new JSControl("table");
    ////////////////////////////////////////////////////////////////////////////
    // 等待遮蔽。
    ////////////////////////////////////////////////////////////////////////////
    this.waitMask = new WaitMask();
    ////////////////////////////////////////////////////////////////////////////
    // 添加全局假期AM。
    ////////////////////////////////////////////////////////////////////////////
    this.addGlobalHolidayAM = new GlobalHolidayAM(this, "添加全局假期", 40);
    ////////////////////////////////////////////////////////////////////////////
    // 修改全局假期AM。
    ////////////////////////////////////////////////////////////////////////////
    this.modifyGlobalHolidayAM = new GlobalHolidayAM(this, "修改全局假期", 40);
    ////////////////////////////////////////////////////////////////////////////
    // 删除确认窗。
    ////////////////////////////////////////////////////////////////////////////
    this.removeConfirmWindow = new ConfirmWindow("删除确认", 30);
    ////////////////////////////////////////////////////////////////////////////
    // 容器。
    ////////////////////////////////////////////////////////////////////////////
    this.container.setAttribute(
      {
        "class": "global_scroll global_scroll_dark container"
      }
    );
    ////////////////////////////////////////////////////////////////////////////
    // 工具栏。
    ////////////////////////////////////////////////////////////////////////////
    this.toolbar.setAttribute(
      {
        "class": "tool_bar"
      }
    );
    ////////////////////////////////////////////////////////////////////////////
    // 添加全局假期按钮。
    ////////////////////////////////////////////////////////////////////////////
    this.addGlobalHolidayButton.setAttribute(
      {
        "class": "global_button_primary add_global_holiday_button"
      }
    );
    this.addGlobalHolidayButton.setContent("添加全局假期");
    ////////////////////////////////////////////////////////////////////////////
    // 全局假期表格。
    ////////////////////////////////////////////////////////////////////////////
    this.globalHolidayTable.setAttribute(
      {
        "class": "global_table global_holiday_table"
      }
    );
    const tableHead = `
      <tr>
        <td class = "holiday_datetime">假期</td>
        <td class = "operation">操作</td>
      </tr>
    `;
    this.globalHolidayTable.setContent(`
      <thead>${tableHead}</thead>
      <tbody>
        <tr>
          <td class = "rowspan" colspan = "2">尚无数据</td>
        </tr>
      </tbody>
    `);
    ////////////////////////////////////////////////////////////////////////////
    // 等待遮蔽。
    ////////////////////////////////////////////////////////////////////////////
    this.waitMask.setAttribute(
      {
        "class": "global_wait_mask"
      }
    );
    ////////////////////////////////////////////////////////////////////////////
    // 添加全局假期AM。
    ////////////////////////////////////////////////////////////////////////////
    this.addGlobalHolidayAM.setClassSign("add_global_holiday_am");
    ////////////////////////////////////////////////////////////////////////////
    // 修改全局假期AM。
    ////////////////////////////////////////////////////////////////////////////
    this.modifyGlobalHolidayAM.setClassSign("modify_global_holiday_am");
    ////////////////////////////////////////////////////////////////////////////
    // 删除确认窗。
    ////////////////////////////////////////////////////////////////////////////
    this.removeConfirmWindow.setAttribute(
      {
        "class": "confirm_window"
      }
    );
    ////////////////////////////////////////////////////////////////////////////
    // 容器。
    ////////////////////////////////////////////////////////////////////////////
    this.container.generateCode();
    ////////////////////////////////////////////////////////////////////////////
    // 工具栏。
    ////////////////////////////////////////////////////////////////////////////
    this.toolbar.generateCode();
    ////////////////////////////////////////////////////////////////////////////
    // 添加全局假期按钮。
    ////////////////////////////////////////////////////////////////////////////
    this.addGlobalHolidayButton.generateCode();
    ////////////////////////////////////////////////////////////////////////////
    // 全局假期表格。
    ////////////////////////////////////////////////////////////////////////////
    this.globalHolidayTable.generateCode();
    ////////////////////////////////////////////////////////////////////////////
    // 等待遮蔽。
    ////////////////////////////////////////////////////////////////////////////
    this.waitMask.generateCode();
    ////////////////////////////////////////////////////////////////////////////
    // 添加全局假期AM。
    ////////////////////////////////////////////////////////////////////////////
    this.addGlobalHolidayAM.generateCode();
    ////////////////////////////////////////////////////////////////////////////
    // 修改全局假期AM。
    ////////////////////////////////////////////////////////////////////////////
    this.modifyGlobalHolidayAM.generateCode();
    ////////////////////////////////////////////////////////////////////////////
    // 删除确认窗。
    ////////////////////////////////////////////////////////////////////////////
    this.removeConfirmWindow.generateCode();
  }

  /**
   * 初始化视图
   */
  initView() {
    ////////////////////////////////////////////////////////////////////////////
    // 页面添加容器。
    ////////////////////////////////////////////////////////////////////////////
    $("body").html(this.container.getCode());
    ////////////////////////////////////////////////////////////////////////////
    // 容器添加工具栏。
    ////////////////////////////////////////////////////////////////////////////
    this.container.getObject().append(this.toolbar.getCode());
    ////////////////////////////////////////////////////////////////////////////
    // 工具栏添加添加全局假期按钮。
    ////////////////////////////////////////////////////////////////////////////
    this.toolbar.getObject().append(this.addGlobalHolidayButton.getCode());
    ////////////////////////////////////////////////////////////////////////////
    // 容器添加全局假期表格。
    ////////////////////////////////////////////////////////////////////////////
    this.container.getObject().append(this.globalHolidayTable.getCode());
    ////////////////////////////////////////////////////////////////////////////
    // 容器添加等待遮蔽。
    ////////////////////////////////////////////////////////////////////////////
    this.container.getObject().append(this.waitMask.getCode());
    ////////////////////////////////////////////////////////////////////////////
    // 容器添加添加全局假期AM。
    ////////////////////////////////////////////////////////////////////////////
    this.container.getObject().append(this.addGlobalHolidayAM.getCode());
    ////////////////////////////////////////////////////////////////////////////
    // 容器添加修改全局假期AM。
    ////////////////////////////////////////////////////////////////////////////
    this.container.getObject().append(this.modifyGlobalHolidayAM.getCode());
    ////////////////////////////////////////////////////////////////////////////
    // 容器添加删除确认窗。
    ////////////////////////////////////////////////////////////////////////////
    this.container.getObject().append(this.removeConfirmWindow.getCode());
  }

  /**
   * 初始化事件
   */
  initEvent() {
    ////////////////////////////////////////////////////////////////////////////
    // 注册添加全局假期按钮的click事件。
    ////////////////////////////////////////////////////////////////////////////
    this.addGlobalHolidayButton.getObject().off("click").on("click", null, this, this.addGlobalHolidayButtonClickEvent);
    ////////////////////////////////////////////////////////////////////////////
    // 初始化添加全局假期AM事件。
    ////////////////////////////////////////////////////////////////////////////
    this.addGlobalHolidayAM.initEvent();
    ////////////////////////////////////////////////////////////////////////////
    // 初始化修改全局假期AM事件。
    ////////////////////////////////////////////////////////////////////////////
    this.modifyGlobalHolidayAM.initEvent();
    ////////////////////////////////////////////////////////////////////////////
    // 初始化删除确认窗事件。
    ////////////////////////////////////////////////////////////////////////////
    this.removeConfirmWindow.initEvent();
    ////////////////////////////////////////////////////////////////////////////
    // 注册添加全局假期AM确认按钮的click事件。
    ////////////////////////////////////////////////////////////////////////////
    this.addGlobalHolidayAM.formList.confirmButton.getObject().off("click").on("click", null, this, this.addGlobalHolidayAMConfirmButtonClickEvent);
    ////////////////////////////////////////////////////////////////////////////
    // 注册添加全局假期AM取消按钮的click事件。
    ////////////////////////////////////////////////////////////////////////////
    this.addGlobalHolidayAM.formList.cancelButton.getObject().off("click").on("click", null, this, this.addGlobalHolidayAMCancelButtonClickEvent);
    ////////////////////////////////////////////////////////////////////////////
    // 注册修改全局假期AM确认按钮的click事件。
    ////////////////////////////////////////////////////////////////////////////
    this.modifyGlobalHolidayAM.formList.confirmButton.getObject().off("click").on("click", null, this, this.modifyGlobalHolidayAMConfirmButtonClickEvent);
    ////////////////////////////////////////////////////////////////////////////
    // 注册修改全局假期AM取消按钮的click事件。
    ////////////////////////////////////////////////////////////////////////////
    this.modifyGlobalHolidayAM.formList.cancelButton.getObject().off("click").on("click", null, this, this.modifyGlobalHolidayAMCancelButtonClickEvent);
    ////////////////////////////////////////////////////////////////////////////
    // 注册删除确认窗确认按钮的click事件。
    ////////////////////////////////////////////////////////////////////////////
    this.removeConfirmWindow.confirmButton.getObject().off("click").on("click", null, this, this.removeConfirmWindowConfirmButtonClickEvent);
  }

  /**
   * 添加全局假期按钮click事件
   * @param event 事件对象
   */
  addGlobalHolidayButtonClickEvent(event) {
    ////////////////////////////////////////////////////////////////////////////
    // 获取调用源。
    ////////////////////////////////////////////////////////////////////////////
    const source = event.data;
    source.addGlobalHolidayAM.show();
  }

  /**
   * 添加全局假期AM确认按钮click事件
   * @param event 事件对象
   */
  addGlobalHolidayAMConfirmButtonClickEvent(event) {
    ////////////////////////////////////////////////////////////////////////////
    // 获取调用源。
    ////////////////////////////////////////////////////////////////////////////
    const source = event.data;
    ////////////////////////////////////////////////////////////////////////////
    // 校验数据之前，先要隐藏之前的提示。
    ////////////////////////////////////////////////////////////////////////////
    source.addGlobalHolidayAM.formList.hideAllPrompt();
    ////////////////////////////////////////////////////////////////////////////
    // 参数检查数组。
    ////////////////////////////////////////////////////////////////////////////
    const parameterCheckArray = new Array();
    parameterCheckArray.push({"name": "holiday_datetime", "value": source.addGlobalHolidayAM.holidayDatetimeTextField.getObject().val(), "id": source.addGlobalHolidayAM.holidayDatetimeTextField.getId(), "allow_null": false, "custom_error_message": null});
    ////////////////////////////////////////////////////////////////////////////
    // 检查参数。
    ////////////////////////////////////////////////////////////////////////////
    for (let i = 0; i < parameterCheckArray.length; i++) {
      const parameterObj = parameterCheckArray[i];
      if (!Module.checkParameter(source.globalHolidayRule, "addGlobalHoliday", parameterObj, source, function error(source, errorMessage) {
        source.addGlobalHolidayAM.formList.showPrompt(parameterObj.id, errorMessage);
      })) {
        return;
      }
    }
    ////////////////////////////////////////////////////////////////////////////
    // 参数数组。
    ////////////////////////////////////////////////////////////////////////////
    const parameterArray = new Array();
    parameterArray.push({"Account-Token": AccountSecurity.getItem("account_token")});
    for (let i = 0; i < parameterCheckArray.length; i++) {
      const parameter = parameterCheckArray[i];
      const param = {};
      param[parameter.name] = parameter.value;
      parameterArray.push(param);
    }
    ////////////////////////////////////////////////////////////////////////////
    // 添加全局假期。
    ////////////////////////////////////////////////////////////////////////////
    Network.request(Network.RequestType.POST, Network.ResponseType.JSON, [{"Content-Type": "application/x-www-form-urlencoded"}],
      Configure.getServerUrl() + "/module/supervision.spot.GlobalHoliday/addGlobalHoliday", parameterArray, source,
      function loadStart(xhr, xhrEvent, source) {
        source.addGlobalHolidayAM.formList.hideResultInfo(); // 隐藏结果信息。
        source.addGlobalHolidayAM.frozenControl("addGlobalHoliday"); // 冻结控件。
      },
      function error(xhr, xhrEvent, source) {
        source.addGlobalHolidayAM.formList.showResultInfo("error", "网络请求失败");
      },
      function timeout(xhr, xhrEvent, source) {
        source.addGlobalHolidayAM.formList.showResultInfo("error", "网络请求超时");
      },
      function readyStateChange(xhr, xhrEvent, source) {
        if ((XMLHttpRequest.DONE == xhr.readyState) && (200 == xhr.status)) {
          source.addGlobalHolidayAM.recoverControl("addGlobalHoliday"); // 恢复控件。
          //////////////////////////////////////////////////////////////////////
          // 响应结果。
          //////////////////////////////////////////////////////////////////////
          const responseResult = xhr.response;
          if (Toolkit.stringEqualsIgnoreCase("SUCCESS", responseResult.status)) {
            ////////////////////////////////////////////////////////////////////
            // 显示成功信息。
            ////////////////////////////////////////////////////////////////////
            source.addGlobalHolidayAM.formList.showResultInfo("success", "添加成功");
            ////////////////////////////////////////////////////////////////////
            // 重置控件。
            ////////////////////////////////////////////////////////////////////
            source.addGlobalHolidayAM.resetControl();
            ////////////////////////////////////////////////////////////////////
            // 获取全局假期。
            ////////////////////////////////////////////////////////////////////
            source.getGlobalHoliday();
          } else if (Toolkit.stringEqualsIgnoreCase("ERROR", responseResult.status)) {
            source.addGlobalHolidayAM.formList.showResultInfo("error", responseResult.attach);
          } else {
            source.addGlobalHolidayAM.formList.showResultInfo("error", "操作异常");
          }
        }
      }
    );
  }

  /**
   * 添加全局假期AM取消按钮click事件
   * @param event 事件对象
   */
  addGlobalHolidayAMCancelButtonClickEvent(event) {
    ////////////////////////////////////////////////////////////////////////////
    // 获取调用源。
    ////////////////////////////////////////////////////////////////////////////
    const source = event.data;
    source.addGlobalHolidayAM.hide();
  }

  /**
   * 修改全局假期AM确认按钮click事件
   * @param event 事件对象
   */
  modifyGlobalHolidayAMConfirmButtonClickEvent(event) {
    ////////////////////////////////////////////////////////////////////////////
    // 获取调用源。
    ////////////////////////////////////////////////////////////////////////////
    const source = event.data;
    ////////////////////////////////////////////////////////////////////////////
    // 校验数据之前，先要隐藏之前的提示。
    ////////////////////////////////////////////////////////////////////////////
    source.modifyGlobalHolidayAM.formList.hideAllPrompt();
    ////////////////////////////////////////////////////////////////////////////
    // 参数检查数组。
    ////////////////////////////////////////////////////////////////////////////
    const parameterCheckArray = new Array();
    parameterCheckArray.push({"name": "uuid", "value": source.modifyGlobalHolidayAM.uuidTextField.getObject().val(), "id": source.modifyGlobalHolidayAM.uuidTextField.getId(), "allow_null": false, "custom_error_message": null});
    parameterCheckArray.push({"name": "holiday_datetime", "value": source.modifyGlobalHolidayAM.holidayDatetimeTextField.getObject().val(), "id": source.modifyGlobalHolidayAM.holidayDatetimeTextField.getId(), "allow_null": false, "custom_error_message": null});
    ////////////////////////////////////////////////////////////////////////////
    // 检查参数。
    ////////////////////////////////////////////////////////////////////////////
    for (let i = 0; i < parameterCheckArray.length; i++) {
      const parameterObj = parameterCheckArray[i];
      if (!Module.checkParameter(source.globalHolidayRule, "modifyGlobalHoliday", parameterObj, source, function error(source, errorMessage) {
        source.modifyGlobalHolidayAM.formList.showPrompt(parameterObj.id, errorMessage);
      })) {
        return;
      }
    }
    ////////////////////////////////////////////////////////////////////////////
    // 参数数组。
    ////////////////////////////////////////////////////////////////////////////
    const parameterArray = new Array();
    parameterArray.push({"Account-Token": AccountSecurity.getItem("account_token")});
    for (let i = 0; i < parameterCheckArray.length; i++) {
      const parameter = parameterCheckArray[i];
      const param = {};
      param[parameter.name] = parameter.value;
      parameterArray.push(param);
    }
    ////////////////////////////////////////////////////////////////////////////
    // 修改全局假期。
    ////////////////////////////////////////////////////////////////////////////
    Network.request(Network.RequestType.POST, Network.ResponseType.JSON, [{"Content-Type": "application/x-www-form-urlencoded"}],
      Configure.getServerUrl() + "/module/supervision.spot.GlobalHoliday/modifyGlobalHoliday", parameterArray, source,
      function loadStart(xhr, xhrEvent, source) {
        source.modifyGlobalHolidayAM.formList.hideResultInfo(); // 隐藏结果信息。
        source.modifyGlobalHolidayAM.frozenControl("modifyGlobalHoliday"); // 冻结控件。
      },
      function error(xhr, xhrEvent, source) {
        source.modifyGlobalHolidayAM.formList.showResultInfo("error", "网络请求失败");
      },
      function timeout(xhr, xhrEvent, source) {
        source.modifyGlobalHolidayAM.formList.showResultInfo("error", "网络请求超时");
      },
      function readyStateChange(xhr, xhrEvent, source) {
        if ((XMLHttpRequest.DONE == xhr.readyState) && (200 == xhr.status)) {
          source.modifyGlobalHolidayAM.recoverControl("modifyGlobalHoliday"); // 恢复控件。
          //////////////////////////////////////////////////////////////////////
          // 响应结果。
          //////////////////////////////////////////////////////////////////////
          const responseResult = xhr.response;
          if (Toolkit.stringEqualsIgnoreCase("SUCCESS", responseResult.status)) {
            ////////////////////////////////////////////////////////////////////
            // 显示成功信息。
            ////////////////////////////////////////////////////////////////////
            source.modifyGlobalHolidayAM.formList.showResultInfo("success", "修改成功");
            ////////////////////////////////////////////////////////////////////
            // 重置控件（修改功能在成功修改之后，不需要重置控件内容，这里不用但
            // 做保留）。
            ////////////////////////////////////////////////////////////////////
            // source.modifyGlobalHolidayAM.resetControl();
            ////////////////////////////////////////////////////////////////////
            // 获取全局假期。
            ////////////////////////////////////////////////////////////////////
            source.getGlobalHoliday();
          } else if (Toolkit.stringEqualsIgnoreCase("ERROR", responseResult.status)) {
            source.modifyGlobalHolidayAM.formList.showResultInfo("error", responseResult.attach);
          } else {
            source.modifyGlobalHolidayAM.formList.showResultInfo("error", "操作异常");
          }
        }
      }
    );
  }

  /**
   * 修改全局假期AM取消按钮click事件
   * @param event 事件对象
   */
  modifyGlobalHolidayAMCancelButtonClickEvent(event) {
    ////////////////////////////////////////////////////////////////////////////
    // 获取调用源。
    ////////////////////////////////////////////////////////////////////////////
    const source = event.data;
    source.modifyGlobalHolidayAM.hide();
  }

  /**
   * 全局假期表格修改按钮click事件
   * @param event 事件对象
   */
  globalHolidayTableModifyButtonClickEvent(event) {
    ////////////////////////////////////////////////////////////////////////////
    // 获取调用源。
    ////////////////////////////////////////////////////////////////////////////
    const source = event.data;
    ////////////////////////////////////////////////////////////////////////////
    // 获取待修改数据的uuid。
    ////////////////////////////////////////////////////////////////////////////
    const uuid = $(this).parent().attr("data-uuid");
    ////////////////////////////////////////////////////////////////////////////
    // 从全局假期数组中获取该uuid对应的数据。
    ////////////////////////////////////////////////////////////////////////////
    let obj = null;
    for (let i = 0; i < source.globalHolidayArray.length; i++) {
      if (uuid == source.globalHolidayArray[i].uuid) {
        obj = source.globalHolidayArray[i];
        break;
      }
    }
    ////////////////////////////////////////////////////////////////////////////
    // 设置当前数据至修改界面。
    ////////////////////////////////////////////////////////////////////////////
    if (null != obj) {
      //////////////////////////////////////////////////////////////////////////
      // 加载uuid。
      //////////////////////////////////////////////////////////////////////////
      source.modifyGlobalHolidayAM.uuidTextField.getObject().val(obj.uuid);
      //////////////////////////////////////////////////////////////////////////
      // 加载假期时间。
      //////////////////////////////////////////////////////////////////////////
      source.modifyGlobalHolidayAM.holidayDatetimeTextField.getObject().val(obj.holiday_datetime);
      //////////////////////////////////////////////////////////////////////////
      // 显示修改全局假期。
      //////////////////////////////////////////////////////////////////////////
      source.modifyGlobalHolidayAM.show();
    }
  }

  /**
   * 全局假期表格删除按钮click事件
   * @param event 事件对象
   */
  globalHolidayTableRemoveButtonClickEvent(event) {
    ////////////////////////////////////////////////////////////////////////////
    // 获取调用源。
    ////////////////////////////////////////////////////////////////////////////
    const source = event.data;
    source.removeDataUuid = $(this).parent().attr("data-uuid");
    source.removeConfirmWindow.show("确认要删除全局假期吗？");
  }

  /**
   * 删除确认窗确认按钮click事件
   * @param event 事件对象
   */
  removeConfirmWindowConfirmButtonClickEvent(event) {
    ////////////////////////////////////////////////////////////////////////////
    // 获取调用源。
    ////////////////////////////////////////////////////////////////////////////
    const source = event.data;
    ////////////////////////////////////////////////////////////////////////////
    // 参数检查数组。
    ////////////////////////////////////////////////////////////////////////////
    const parameterCheckArray = new Array();
    parameterCheckArray.push({"name": "uuid", "value": source.removeDataUuid, "id": source.removeConfirmWindow.contentLabel.getId(), "allow_null": false, "custom_error_message": null});
    ////////////////////////////////////////////////////////////////////////////
    // 检查参数。
    ////////////////////////////////////////////////////////////////////////////
    for (let i = 0; i < parameterCheckArray.length; i++) {
      const parameterObj = parameterCheckArray[i];
      if (!Module.checkParameter(source.globalHolidayRule, "removeGlobalHoliday", parameterObj, source, function error(source, errorMessage) {
        source.removeConfirmWindow.showResultInfo("error", errorMessage);
      })) {
        return;
      }
    }
    ////////////////////////////////////////////////////////////////////////////
    // 参数数组。
    ////////////////////////////////////////////////////////////////////////////
    const parameterArray = new Array();
    parameterArray.push({"Account-Token": AccountSecurity.getItem("account_token")});
    for (let i = 0; i < parameterCheckArray.length; i++) {
      const parameter = parameterCheckArray[i];
      const param = {};
      param[parameter.name] = parameter.value;
      parameterArray.push(param);
    }
    ////////////////////////////////////////////////////////////////////////////
    // 删除全局假期。
    ////////////////////////////////////////////////////////////////////////////
    Network.request(Network.RequestType.POST, Network.ResponseType.JSON, [{"Content-Type": "application/x-www-form-urlencoded"}],
      Configure.getServerUrl() + "/module/supervision.spot.GlobalHoliday/removeGlobalHoliday", parameterArray, source,
      function loadStart(xhr, xhrEvent, source) {
        source.removeConfirmWindow.hideResultInfo(); // 隐藏结果信息。
        source.removeConfirmWindow.frozenControl("removeGlobalHoliday"); // 冻结控件。
      },
      function error(xhr, xhrEvent, source) {
        source.removeConfirmWindow.showResultInfo("error", "网络请求失败");
      },
      function timeout(xhr, xhrEvent, source) {
        source.removeConfirmWindow.showResultInfo("error", "网络请求超时");
      },
      function readyStateChange(xhr, xhrEvent, source) {
        if ((XMLHttpRequest.DONE == xhr.readyState) && (200 == xhr.status)) {
          source.removeConfirmWindow.recoverControl("removeGlobalHoliday"); // 恢复控件。
          //////////////////////////////////////////////////////////////////////
          // 响应结果。
          //////////////////////////////////////////////////////////////////////
          const responseResult = xhr.response;
          if (Toolkit.stringEqualsIgnoreCase("SUCCESS", responseResult.status)) {
            ////////////////////////////////////////////////////////////////////
            // 显示成功信息。
            ////////////////////////////////////////////////////////////////////
            source.removeConfirmWindow.showResultInfo("success", "删除成功");
            ////////////////////////////////////////////////////////////////////
            // 删除完成。
            ////////////////////////////////////////////////////////////////////
            source.removeConfirmWindow.complete();
            ////////////////////////////////////////////////////////////////////
            // 获取全局假期。
            ////////////////////////////////////////////////////////////////////
            source.getGlobalHoliday();
          } else if (Toolkit.stringEqualsIgnoreCase("ERROR", responseResult.status)) {
            source.removeConfirmWindow.showResultInfo("error", responseResult.attach);
          } else {
            source.removeConfirmWindow.showResultInfo("error", "操作异常");
          }
        }
      }
    );
  }

  /**
   * 获取全局假期
   */
  getGlobalHoliday() {
    ////////////////////////////////////////////////////////////////////////////
    // 获取全局假期。
    ////////////////////////////////////////////////////////////////////////////
    Network.request(Network.RequestType.POST, Network.ResponseType.JSON, [{"Content-Type": "application/x-www-form-urlencoded"}],
      Configure.getServerUrl() + "/module/supervision.spot.GlobalHoliday/getGlobalHoliday", [{"Account-Token": AccountSecurity.getItem("account_token")}], this,
      function loadStart(xhr, xhrEvent, source) {
        source.frozenControl("getGlobalHoliday"); // 冻结控件。
        source.waitMask.show(); // 显示等待遮蔽。
      },
      function error(xhr, xhrEvent, source) {
        Error.redirect("../home/error.html", "获取全局假期", "网络请求失败", window.location.href);
      },
      function timeout(xhr, xhrEvent, source) {
        Error.redirect("../home/error.html", "获取全局假期", "网络请求超时", window.location.href);
      },
      function readyStateChange(xhr, xhrEvent, source) {
        if ((XMLHttpRequest.DONE == xhr.readyState) && (200 == xhr.status)) {
          source.recoverControl("getGlobalHoliday"); // 恢复控件。
          source.waitMask.hide(); // 隐藏等待遮蔽。
          //////////////////////////////////////////////////////////////////////
          // 响应结果。
          //////////////////////////////////////////////////////////////////////
          const responseResult = xhr.response;
          if (Toolkit.stringEqualsIgnoreCase("SUCCESS", responseResult.status)) {
            ////////////////////////////////////////////////////////////////////
            // 清空数组。
            ////////////////////////////////////////////////////////////////////
            source.globalHolidayArray.splice(0, source.globalHolidayArray.length);
            ////////////////////////////////////////////////////////////////////
            // 更新数组。
            ////////////////////////////////////////////////////////////////////
            for (let i = 0; i < responseResult.content.array.length; i++) {
              source.globalHolidayArray.push(responseResult.content.array[i]);
            }
            ////////////////////////////////////////////////////////////////////
            // 恢复控件。
            ////////////////////////////////////////////////////////////////////
            source.recoverControl("getGlobalHoliday");
            ////////////////////////////////////////////////////////////////////
            // 如果全局假期数组不为空，则添加表格数据。
            ////////////////////////////////////////////////////////////////////
            if (0 < source.globalHolidayArray.length) {
              let code = "";
              for (let i = 0; i < source.globalHolidayArray.length; i++) {
                const globalHoliday = source.globalHolidayArray[i];
                code += `
                  <tr>
                    <td class = "holiday_datetime">${globalHoliday.holiday_datetime}</td>
                    <td class = "operation" data-uuid = "${globalHoliday.uuid}"><span class = "modify">修改</span><span class = "remove">删除</span></td>
                  </tr>
                `;
              }
              source.globalHolidayTable.getObject().find("tbody").html(code);
            } else {
              source.globalHolidayTable.getObject().find("tbody").html(`
                <tr>
                  <td class = "rowspan" colspan = "2">尚无数据</td>
                </tr>
              `);
            }
            ////////////////////////////////////////////////////////////////////
            // 加载完成后注册事件。
            ////////////////////////////////////////////////////////////////////
            source.globalHolidayTable.getObject().find("tbody").find("tr").find(".operation").find(".modify").off("click").on("click", null, source, source.globalHolidayTableModifyButtonClickEvent);
            source.globalHolidayTable.getObject().find("tbody").find("tr").find(".operation").find(".remove").off("click").on("click", null, source, source.globalHolidayTableRemoveButtonClickEvent);
          } else {
            Error.redirect("../home/error.html", "获取全局假期", responseResult.attach, window.location.href);
          }
        }
      }
    );
  }

  /**
   * 冻结控件
   * @param name 冻结标记名称
   */
  frozenControl(name) {
    ////////////////////////////////////////////////////////////////////////////
    // 存入队列。
    ////////////////////////////////////////////////////////////////////////////
    this.queue.push(name);
    this.addGlobalHolidayButton.getObject().attr("disabled", "disabled");
  }

  /**
   * 恢复控件
   * @param name 恢复标记名称
   */
  recoverControl(name) {
    ////////////////////////////////////////////////////////////////////////////
    // 队列取出。
    ////////////////////////////////////////////////////////////////////////////
    this.queue.pop(name);
    if (this.queue.isEmpty()) {
      //////////////////////////////////////////////////////////////////////////
      // 如果取出了队列中所有的元素才能恢复。
      //////////////////////////////////////////////////////////////////////////
      this.addGlobalHolidayButton.getObject().removeAttr("disabled");
    }
  }
}
