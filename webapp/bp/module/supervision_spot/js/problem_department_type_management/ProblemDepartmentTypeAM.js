"use strict";

class ProblemDepartmentTypeAM {
  /**
   * 构造函数
   *
   * @param source 调用源
   * @param windowTitle 窗口标题
   * @param windowWidth 窗口宽度
   */
  constructor(source, windowTitle, windowWidth) {
    ////////////////////////////////////////////////////////////////////////////
    // 调用源。
    ////////////////////////////////////////////////////////////////////////////
    this.source = source;
    ////////////////////////////////////////////////////////////////////////////
    // 赋值窗口标题。
    ////////////////////////////////////////////////////////////////////////////
    this.windowTitle = windowTitle;
    ////////////////////////////////////////////////////////////////////////////
    // 赋值窗口宽度。
    ////////////////////////////////////////////////////////////////////////////
    this.windowWidth = windowWidth;
    ////////////////////////////////////////////////////////////////////////////
    // 窗口class标记。
    ////////////////////////////////////////////////////////////////////////////
    this.windowClassSign = "";
    ////////////////////////////////////////////////////////////////////////////
    // 问题单位类型级别。
    ////////////////////////////////////////////////////////////////////////////
    this.problemDepartmentTypeLevel = 0;
    ////////////////////////////////////////////////////////////////////////////
    // 队列。
    ////////////////////////////////////////////////////////////////////////////
    this.queue = new Queue();
  }

  /**
   * 设置窗口class标记
   */
  setClassSign(classSign) {
    this.windowClassSign = classSign;
  }

  /**
   * 生成代码
   */
  generateCode() {
    ////////////////////////////////////////////////////////////////////////////
    // uuid标签。
    ////////////////////////////////////////////////////////////////////////////
    this.uuidLabel = new JSControl("label");
    ////////////////////////////////////////////////////////////////////////////
    // uuid输入框。
    ////////////////////////////////////////////////////////////////////////////
    this.uuidTextField = new JSControl("input");
    ////////////////////////////////////////////////////////////////////////////
    // 一级问题单位类型标签。
    ////////////////////////////////////////////////////////////////////////////
    this.levelOneNameLabel = new JSControl("label");
    ////////////////////////////////////////////////////////////////////////////
    // 一级问题单位类型下拉框。
    ////////////////////////////////////////////////////////////////////////////
    this.levelOneSelect = new JSControl("select");
    ////////////////////////////////////////////////////////////////////////////
    // 二级问题单位类型标签。
    ////////////////////////////////////////////////////////////////////////////
    this.levelTwoNameLabel = new JSControl("label");
    ////////////////////////////////////////////////////////////////////////////
    // 二级问题单位类型下拉框。
    ////////////////////////////////////////////////////////////////////////////
    this.levelTwoSelect = new JSControl("select");
    ////////////////////////////////////////////////////////////////////////////
    // 名称标签。
    ////////////////////////////////////////////////////////////////////////////
    this.nameLabel = new JSControl("label");
    ////////////////////////////////////////////////////////////////////////////
    // 名称输入框。
    ////////////////////////////////////////////////////////////////////////////
    this.nameTextField = new JSControl("input");
    ////////////////////////////////////////////////////////////////////////////
    // 排序标签。
    ////////////////////////////////////////////////////////////////////////////
    this.orderLabel = new JSControl("label");
    ////////////////////////////////////////////////////////////////////////////
    // 排序输入框。
    ////////////////////////////////////////////////////////////////////////////
    this.orderTextField = new JSControl("input");
    ////////////////////////////////////////////////////////////////////////////
    // 描述标签。
    ////////////////////////////////////////////////////////////////////////////
    this.descriptionLabel = new JSControl("label");
    ////////////////////////////////////////////////////////////////////////////
    // 描述输入框。
    ////////////////////////////////////////////////////////////////////////////
    this.descriptionTextField = new JSControl("input");
    ////////////////////////////////////////////////////////////////////////////
    // 表单列表。
    ////////////////////////////////////////////////////////////////////////////
    this.formList = new FormList();
    ////////////////////////////////////////////////////////////////////////////
    // 弹窗。
    ////////////////////////////////////////////////////////////////////////////
    this.popupWindow = new PopupWindow(this, this.windowTitle, this.windowWidth, this.popupWindowHideCallback);
    ////////////////////////////////////////////////////////////////////////////
    // uuid标签。
    ////////////////////////////////////////////////////////////////////////////
    this.uuidLabel.setAttribute(
      {
        "class": "global_label"
      }
    );
    this.uuidLabel.setContent("uuid");
    ////////////////////////////////////////////////////////////////////////////
    // uuid输入框。
    ////////////////////////////////////////////////////////////////////////////
    this.uuidTextField.setAttribute(
      {
        "type": "text",
        "class": "global_input",
        "style": "width: -webkit-fill-available;",
        "disabled": "disabled"
      }
    );
    ////////////////////////////////////////////////////////////////////////////
    // 一级问题单位类型标签。
    ////////////////////////////////////////////////////////////////////////////
    this.levelOneNameLabel.setAttribute(
      {
        "class": "global_label"
      }
    );
    this.levelOneNameLabel.setContent("一级问题单位类型");
    ////////////////////////////////////////////////////////////////////////////
    // 一级问题单位类型下拉框。
    ////////////////////////////////////////////////////////////////////////////
    this.levelOneSelect.setAttribute(
      {
        "class": "global_select",
        "style": "width: 100%;"
      }
    );
    ////////////////////////////////////////////////////////////////////////////
    // 二级问题单位类型标签。
    ////////////////////////////////////////////////////////////////////////////
    this.levelTwoNameLabel.setAttribute(
      {
        "class": "global_label"
      }
    );
    this.levelTwoNameLabel.setContent("二级问题单位类型");
    ////////////////////////////////////////////////////////////////////////////
    // 二级问题单位类型下拉框。
    ////////////////////////////////////////////////////////////////////////////
    this.levelTwoSelect.setAttribute(
      {
        "class": "global_select",
        "style": "width: 100%;"
      }
    );
    ////////////////////////////////////////////////////////////////////////////
    // 名称标签。
    ////////////////////////////////////////////////////////////////////////////
    this.nameLabel.setAttribute(
      {
        "class": "global_label"
      }
    );
    this.nameLabel.setContent("名称");
    ////////////////////////////////////////////////////////////////////////////
    // 名称输入框。
    ////////////////////////////////////////////////////////////////////////////
    this.nameTextField.setAttribute(
      {
        "type": "text",
        "class": "global_input",
        "placeholder": Module.getMethodParameterRuleObj(this.source.problemDepartmentTypeRule, "addProblemDepartmentType", "name").format_prompt,
        "style": "width: -webkit-fill-available;"
      }
    );
    ////////////////////////////////////////////////////////////////////////////
    // 排序标签。
    ////////////////////////////////////////////////////////////////////////////
    this.orderLabel.setAttribute(
      {
        "class": "global_label"
      }
    );
    this.orderLabel.setContent("排序编号");
    ////////////////////////////////////////////////////////////////////////////
    // 排序输入框。
    ////////////////////////////////////////////////////////////////////////////
    this.orderTextField.setAttribute(
      {
        "type": "text",
        "class": "global_input",
        "placeholder": Module.getMethodParameterRuleObj(this.source.problemDepartmentTypeRule, "addProblemDepartmentType", "order").format_prompt,
        "style": "width: -webkit-fill-available;"
      }
    );
    ////////////////////////////////////////////////////////////////////////////
    // 描述标签。
    ////////////////////////////////////////////////////////////////////////////
    this.descriptionLabel.setAttribute(
      {
        "class": "global_label"
      }
    );
    this.descriptionLabel.setContent("描述");
    ////////////////////////////////////////////////////////////////////////////
    // 描述输入框。
    ////////////////////////////////////////////////////////////////////////////
    this.descriptionTextField.setAttribute(
      {
        "type": "text",
        "class": "global_input",
        "placeholder": Module.getMethodParameterRuleObj(this.source.problemDepartmentTypeRule, "addProblemDepartmentType", "description").format_prompt,
        "style": "width: -webkit-fill-available;"
      }
    );
    ////////////////////////////////////////////////////////////////////////////
    // 表单列表。
    ////////////////////////////////////////////////////////////////////////////
    this.formList.setAttribute(
      {
        "class": "global_form_list"
      }
    );
    ////////////////////////////////////////////////////////////////////////////
    // 弹窗。
    ////////////////////////////////////////////////////////////////////////////
    this.popupWindow.setAttribute(
      {
        "class": `global_popup_window ${this.windowClassSign}`,
        "style": "display: none;"
      }
    );
    ////////////////////////////////////////////////////////////////////////////
    // uuid标签。
    ////////////////////////////////////////////////////////////////////////////
    this.uuidLabel.generateCode();
    ////////////////////////////////////////////////////////////////////////////
    // uuid输入框。
    ////////////////////////////////////////////////////////////////////////////
    this.uuidTextField.generateCode();
    ////////////////////////////////////////////////////////////////////////////
    // 一级问题单位类型标签。
    ////////////////////////////////////////////////////////////////////////////
    this.levelOneNameLabel.generateCode();
    ////////////////////////////////////////////////////////////////////////////
    // 一级问题单位类型下拉框。
    ////////////////////////////////////////////////////////////////////////////
    this.levelOneSelect.generateCode();
    ////////////////////////////////////////////////////////////////////////////
    // 二级问题单位类型标签。
    ////////////////////////////////////////////////////////////////////////////
    this.levelTwoNameLabel.generateCode();
    ////////////////////////////////////////////////////////////////////////////
    // 二级问题单位类型下拉框。
    ////////////////////////////////////////////////////////////////////////////
    this.levelTwoSelect.generateCode();
    ////////////////////////////////////////////////////////////////////////////
    // 名称标签。
    ////////////////////////////////////////////////////////////////////////////
    this.nameLabel.generateCode();
    ////////////////////////////////////////////////////////////////////////////
    // 名称输入框。
    ////////////////////////////////////////////////////////////////////////////
    this.nameTextField.generateCode();
    ////////////////////////////////////////////////////////////////////////////
    // 排序标签。
    ////////////////////////////////////////////////////////////////////////////
    this.orderLabel.generateCode();
    ////////////////////////////////////////////////////////////////////////////
    // 排序输入框。
    ////////////////////////////////////////////////////////////////////////////
    this.orderTextField.generateCode();
    ////////////////////////////////////////////////////////////////////////////
    // 描述标签。
    ////////////////////////////////////////////////////////////////////////////
    this.descriptionLabel.generateCode();
    ////////////////////////////////////////////////////////////////////////////
    // 描述输入框。
    ////////////////////////////////////////////////////////////////////////////
    this.descriptionTextField.generateCode();
    ////////////////////////////////////////////////////////////////////////////
    // 表单列表。
    ////////////////////////////////////////////////////////////////////////////
    const list = new Array();
    list.push({"attr": {"style": "display: none;"}, "required": false, "label_code": `${this.uuidLabel.getCode()}`, "control_id": `${this.uuidTextField.getId()}`, "control_code": `${this.uuidTextField.getCode()}`});
    list.push({"attr": {}, "required": true, "label_code": `${this.levelOneNameLabel.getCode()}`, "control_id": `${this.levelOneSelect.getId()}`, "control_code": `${this.levelOneSelect.getCode()}`});
    list.push({"attr": {}, "required": true, "label_code": `${this.levelTwoNameLabel.getCode()}`, "control_id": `${this.levelTwoSelect.getId()}`, "control_code": `${this.levelTwoSelect.getCode()}`});
    list.push({"attr": {}, "required": true, "label_code": `${this.nameLabel.getCode()}`, "control_id": `${this.nameTextField.getId()}`, "control_code": `${this.nameTextField.getCode()}`});
    list.push({"attr": {}, "required": true, "label_code": `${this.orderLabel.getCode()}`, "control_id": `${this.orderTextField.getId()}`, "control_code": `${this.orderTextField.getCode()}`});
    list.push({"attr": {}, "required": false, "label_code": `${this.descriptionLabel.getCode()}`, "control_id": `${this.descriptionTextField.getId()}`, "control_code": `${this.descriptionTextField.getCode()}`});
    this.formList.setContent(list);
    this.formList.generateCode();
    ////////////////////////////////////////////////////////////////////////////
    // 弹窗。
    ////////////////////////////////////////////////////////////////////////////
    this.popupWindow.setContent(this.formList.getCode());
    this.popupWindow.generateCode();
  }

  /**
   * 初始化事件
   */
  initEvent() {
    ////////////////////////////////////////////////////////////////////////////
    // 初始化弹窗事件。
    ////////////////////////////////////////////////////////////////////////////
    this.popupWindow.initEvent();
  }

  /**
   * 获取代码
   */
  getCode() {
    ////////////////////////////////////////////////////////////////////////////
    // 由于当前对象基于PopupWindow，所有的内容都放在了popupWindow里面所以应该返
    // 回popupWindow的代码。
    ////////////////////////////////////////////////////////////////////////////
    return this.popupWindow.getCode();
  }

  /**
   * 显示弹窗
   * @param problemDepartmentTypeLevel 问题单位类型级别
   */
  show(problemDepartmentTypeLevel) {
    ////////////////////////////////////////////////////////////////////////////
    // 设置问题单位类型级别用于请求服务前的判断。
    ////////////////////////////////////////////////////////////////////////////
    this.problemDepartmentTypeLevel = problemDepartmentTypeLevel;
    ////////////////////////////////////////////////////////////////////////////
    // 显示一级问题单位类型、二级问题单位类型和链接（重置）。
    ////////////////////////////////////////////////////////////////////////////
    this.formList.getObject().find("tbody").find("tr").removeClass("gfl_hide_row");
    ////////////////////////////////////////////////////////////////////////////
    // 判断问题单位类型级别。
    ////////////////////////////////////////////////////////////////////////////
    if (1 == this.problemDepartmentTypeLevel) {
      //////////////////////////////////////////////////////////////////////////
      // 隐藏一级问题单位类型、二级问题单位类型和链接。
      //////////////////////////////////////////////////////////////////////////
      this.levelOneSelect.getObject().parent().parent().addClass("gfl_hide_row");
      this.levelTwoSelect.getObject().parent().parent().addClass("gfl_hide_row");
    } else if (2 == this.problemDepartmentTypeLevel) {
      //////////////////////////////////////////////////////////////////////////
      // 隐鲹二级问题单位类型和链接。
      //////////////////////////////////////////////////////////////////////////
      this.levelTwoSelect.getObject().parent().parent().addClass("gfl_hide_row");
    } else if (3 == this.problemDepartmentTypeLevel) {
      //////////////////////////////////////////////////////////////////////////
      // 级别为3时即显示全部，前面的移除所有隐藏行功能已实现。
      //////////////////////////////////////////////////////////////////////////
    }
    ////////////////////////////////////////////////////////////////////////////
    // 显示弹窗。
    ////////////////////////////////////////////////////////////////////////////
    this.popupWindow.show();
    ////////////////////////////////////////////////////////////////////////////
    // 设置焦点在名称输入框。
    ////////////////////////////////////////////////////////////////////////////
    this.nameTextField.getObject().focus();
  }

  /**
   * 隐藏弹窗
   */
  hide() {
    ////////////////////////////////////////////////////////////////////////////
    // 隐藏弹窗。
    ////////////////////////////////////////////////////////////////////////////
    this.popupWindow.hide();
  }

  /**
   * 刷新下拉框
   */
  refreshSelect(problemDepartmentTypeArray) {
    ////////////////////////////////////////////////////////////////////
    // 清空一级问题单位类型下拉框的数据并设置状态。
    ////////////////////////////////////////////////////////////////////
    this.levelOneSelect.getObject().empty();
    this.levelOneSelect.getObject().attr("disabled", "disabled");
    ////////////////////////////////////////////////////////////////////////////
    // 填充一级问题单位类型数据。
    ////////////////////////////////////////////////////////////////////////////
    for (let i = 0; i < problemDepartmentTypeArray.length; i++) {
      let m = problemDepartmentTypeArray[i];
      if (1 == m.level) {
        this.levelOneSelect.getObject().append(`<option value = "${m.uuid}">${m.name}</option>`);
      }
    }
    ////////////////////////////////////////////////////////////////////////////
    // 根据一级问题单位类型下拉框的数据有无设置状态。
    ////////////////////////////////////////////////////////////////////////////
    if (0 < this.levelOneSelect.getObject().children("option").length) {
      this.levelOneSelect.getObject().removeAttr("disabled");
    }
    ////////////////////////////////////////////////////////////////////
    // 清空二级问题单位类型下拉框的数据并设置状态。
    ////////////////////////////////////////////////////////////////////
    this.levelTwoSelect.getObject().empty();
    this.levelTwoSelect.getObject().attr("disabled", "disabled");
    ////////////////////////////////////////////////////////////////////////////
    // 填充二级问题单位类型数据。
    ////////////////////////////////////////////////////////////////////////////
    {
      let selectVal = this.levelOneSelect.getObject().val();
      for (let i = 0; i < problemDepartmentTypeArray.length; i++) {
        let m = problemDepartmentTypeArray[i];
        if (selectVal == m.parent_uuid) {
          this.levelTwoSelect.getObject().append(`<option value = "${m.uuid}">${m.name}</option>`);
        }
      }
    }
    ////////////////////////////////////////////////////////////////////////////
    // 根据二级问题单位类型下拉框的数据有无设置状态。
    ////////////////////////////////////////////////////////////////////////////
    if (0 < this.levelTwoSelect.getObject().children("option").length) {
      this.levelTwoSelect.getObject().removeAttr("disabled");
    }
  }

  /**
   * 弹窗隐藏回调方法
   * @param source 调用源
   */
  popupWindowHideCallback(source) {
    ////////////////////////////////////////////////////////////////////////////
    // 隐藏结果信息。
    ////////////////////////////////////////////////////////////////////////////
    source.formList.hideResultInfo();
    ////////////////////////////////////////////////////////////////////////////
    // 隐藏所有提示。
    ////////////////////////////////////////////////////////////////////////////
    source.formList.hideAllPrompt();
    ////////////////////////////////////////////////////////////////////////////
    // 重置控件。
    ////////////////////////////////////////////////////////////////////////////
    source.resetControl();
  }

  /**
   * 冻结控件
   * @param name 冻结标记名称
   */
  frozenControl(name) {
    ////////////////////////////////////////////////////////////////////////////
    // 存入队列。
    ////////////////////////////////////////////////////////////////////////////
    this.queue.push(name);
    this.levelOneSelect.getObject().attr("disabled", "disabled");
    this.levelTwoSelect.getObject().attr("disabled", "disabled");
    this.nameTextField.getObject().attr("disabled", "disabled");
    this.orderTextField.getObject().attr("disabled", "disabled");
    this.descriptionTextField.getObject().attr("disabled", "disabled");
    this.formList.confirmButton.getObject().attr("disabled", "disabled");
    this.formList.cancelButton.getObject().attr("disabled", "disabled");
    this.popupWindow.removeEvent();
  }

  /**
   * 恢复控件
   * @param name 恢复标记名称
   */
  recoverControl(name) {
    ////////////////////////////////////////////////////////////////////////////
    // 队列取出。
    ////////////////////////////////////////////////////////////////////////////
    this.queue.pop(name);
    if (this.queue.isEmpty()) {
      //////////////////////////////////////////////////////////////////////////
      // 如果取出了队列中所有的元素才能恢复。
      //////////////////////////////////////////////////////////////////////////
      this.levelOneSelect.getObject().removeAttr("disabled");
      this.levelTwoSelect.getObject().removeAttr("disabled");
      this.nameTextField.getObject().removeAttr("disabled");
      this.orderTextField.getObject().removeAttr("disabled");
      this.descriptionTextField.getObject().removeAttr("disabled");
      this.formList.confirmButton.getObject().removeAttr("disabled");
      this.formList.cancelButton.getObject().removeAttr("disabled");
      this.popupWindow.recoverEvent();
    }
  }

  /**
   * 重置控件
   */
  resetControl() {
    ////////////////////////////////////////////////////////////////////////////
    // 重置的目的是为了下次输入的方便，对于下拉框来讲不是清空其内容，而是应该重
    // 置默认选项。由于二级下拉框跟随一级下拉框联动，所以这里不对除一级以外的下
    // 拉框做重置设置。
    ////////////////////////////////////////////////////////////////////////////
    this.levelOneSelect.getObject().find("option:eq(0)").prop("selected", true);
    this.levelOneSelect.getObject().trigger("change");
    this.uuidTextField.getObject().val("");
    this.nameTextField.getObject().val("");
    this.orderTextField.getObject().val("");
    this.descriptionTextField.getObject().val("");
  }
}
